<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RealDox.Api</name>
    </assembly>
    <members>
        <member name="M:RealDox.Api.Controllers.TodoController.List">
            <summary>
            Retrieves a list of items
            </summary>
            <remarks>Awesomeness!</remarks>
            <response code="200">Product listed</response>
            <response code="500">Oops! Can't get your items list right now</response>
        </member>
        <member name="M:RealDox.Api.Controllers.TodoController.GetSingle(System.String)">
            <summary>
            Retrieves a specific Item by unique id
            </summary>
            <param name="id">Item id</param>
            <remarks>Awesomeness!</remarks>
            <returns>An existing TodoItem</returns>
            <response code="200">Item found</response>
            <response code="400">Item id couldn't be found</response>
            <response code="500">Oops! Can't found your item right now</response>
        </member>
        <member name="M:RealDox.Api.Controllers.TodoController.Create(RealDox.Core.Models.TodoItem)">
             <summary>
             Creates a TodoItem.
             </summary>
             <remarks>
             Sample request:
            
                 POST /Todo
                 {
                    "id": 1,
                    "name": "Item1",
                    "notes" : "xyzf",
                    "done": true
                 }
            
             </remarks>
             <param name="item">Item object</param>
             <returns>A newly-created TodoItem</returns>
             <response code="201">Returns the newly-created item</response>
             <response code="400">If the item is null</response>
             <response code="409">If the item already exists</response>
             <response code="500">Oops! Can't create your item right now</response>
        </member>
        <member name="M:RealDox.Api.Controllers.TodoController.Edit(RealDox.Core.Models.TodoItem)">
             <summary>
             Updates a TodoItem.
             </summary>
             <remarks>
             Sample request:
            
                 PUT /Todo
                 {
                    "id": 1,
                    "name": "Item1",
                    "notes" : "xyzf",
                    "done": true
                 }
            
             </remarks>
             <param name="item">Item object</param>
             <response code="400">If the item is null or couldn't be found</response>
             <response code="500">Oops! Can't update your item right now</response>
        </member>
        <member name="M:RealDox.Api.Controllers.TodoController.Delete(System.String)">
            <summary>
            Deletes a specific TodoItem.
            </summary>
            <param name="id"></param> 
        </member>
        <member name="T:RealDox.Api.Security.AuthorizationPolicies">
            <summary>
            Represents authorization policy names.
            </summary>
        </member>
        <member name="T:RealDox.Api.Security.InvalidTokenDictionary">
            <summary>
            Stores token IDs that have been revoked.
            </summary>
        </member>
        <member name="T:RealDox.Api.Security.JwtOptions">
            <summary>
            Represents options when issue or validate a JWT.
            </summary>
        </member>
        <member name="P:RealDox.Api.Security.JwtOptions.SigningKey">
            <summary>
            Signing key.
            </summary>
        </member>
        <member name="P:RealDox.Api.Security.JwtOptions.SigningAlgorithm">
            <summary>
            Signing algorithm.
            </summary>
        </member>
        <member name="P:RealDox.Api.Security.JwtOptions.Issuer">
            <summary>
            Token issuer.
            </summary>
        </member>
        <member name="P:RealDox.Api.Security.JwtOptions.Audience">
            <summary>
            Token audience.
            </summary>
        </member>
        <member name="P:RealDox.Api.Security.JwtOptions.ExpireInMinutes">
            <summary>
            How many minutes the token will be expired after it has been issued.
            </summary>
        </member>
        <member name="P:RealDox.Api.Security.JwtOptions.RememberMeExpireInDays">
            <summary>
            When "Remember me" checked, how many days the token will be expired after it has been issued.
            </summary>
        </member>
        <member name="P:RealDox.Api.Security.JwtOptions.UseCookie">
            <summary>
            True to add token in cookie for generation and retrieve token from there for authentication and authorization,
            otherwise use HTTP Authorization Header.
            </summary>
        </member>
        <member name="P:RealDox.Api.Security.JwtOptions.CookieName">
            <summary>
            Cookie name for the token. Enabled only if <see cref="P:RealDox.Api.Security.JwtOptions.UseCookie"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:RealDox.Api.Security.JwtOptions.DomainName">
            <summary>
            Domain name for the cookie. Enabled only if <see cref="P:RealDox.Api.Security.JwtOptions.UseCookie"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:RealDox.Api.Security.JwtOptions.CookiePath">
            <summary>
            Path for cookien. Enabled only if <see cref="P:RealDox.Api.Security.JwtOptions.UseCookie"/> is <c>true</c>.
            </summary>
        </member>
        <member name="T:RealDox.Api.Security.JwtSecureDataFormat">
            <summary>
            We write this class since Asp.NET Core does not provide built-in support for token validation in cookie
            while it does for Bearer token in HTTP header though.
            For now we only decode token and validate. We encode and sign token in the login/ create token action.
            </summary>
        </member>
        <member name="T:RealDox.Api.Security.JwtValidator">
            <inheritdoc />
            <summary>
            Holds custom validation logics for JWT.
            </summary>
        </member>
        <member name="M:RealDox.Api.Security.JwtValidator.#ctor(System.String,RealDox.Api.Security.InvalidTokenDictionary)">
            <inheritdoc />
            <summary>
            Initializes a new instance of <see cref="T:RealDox.Api.Security.JwtValidator"/>.
            </summary>
            <param name="algorithm">Signature signing algorithm name.</param>
            <param name="invalidTokenDictionary">Invalid token dictionary.</param>
        </member>
        <member name="M:RealDox.Api.Security.JwtValidator.ValidateToken(System.String,Microsoft.IdentityModel.Tokens.TokenValidationParameters,Microsoft.IdentityModel.Tokens.SecurityToken@)">
            <inheritdoc />
        </member>
        <member name="M:RealDox.Api.Security.JwtValidator.RevokeToken(System.String)">
            <summary>
            Revokes a token.
            </summary>
            <param name="token">The token string.</param>
        </member>
        <member name="T:RealDox.Api.Security.CustomClaimTypes">
            <summary>
            Permission claims for application user authorization.
            </summary>
        </member>
    </members>
</doc>
